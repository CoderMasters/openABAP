using System.Collections;
using System.Text;
using System.Reflection;
using System.Reflection.Emit;
using openABAP.Compiler;
using openABAP.Runtime;

COMPILER openABAP

//------------------------------------------------------------------------
// additional declarations for generated class Parser
//------------------------------------------------------------------------

	public openABAP.Compiler.Compiler Context = null;
	
//------------------------------------------------------------------------

IGNORECASE

/*------------------------------------------------------------------------*/
CHARACTERS
/*------------------------------------------------------------------------*/

	tab                = '\u0009'. /*  9 = tabulator */
	eol                = '\u000a'. /* 10 = line feed */
	cr                 = '\u000d'. /* 13 = carriage return */
	newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */

	letter             = 'A' .. 'Z' + 'a' .. 'z' + '_'.
	digit              = "0123456789".
	notDigit           = ANY - digit.

    apostrophe         = '\''.
    anyButApostrophe   = ANY - apostrophe.

	char               = ANY - "\"" - newLine.
	notNewLine         = ANY - newLine .
	ws                 = " " + tab + '\u000b' + '\u000c' + newLine. 
	
    colon              = ":".
    
/*------------------------------------------------------------------------*/
TOKENS
/*------------------------------------------------------------------------*/
	number             = digit { digit }.
	string             = '\'' { anyButApostrophe } '\''.     
	
	ident              = letter { letter | digit }.
	
	SPACE              = ws { ws }.
	
	DOT                = '.'.
	MINUS              = "-".
	PLUS               = "+".
	MULTIPLY           = "*".
	DIVIDE             = "/".

	PROGRAM            = "program".
	CLASS              = "class".
	DEFINITION         = "definition".
	IMPLEMENTATION     = "implementation".
	ENDCLASS           = "endclass".
	PUBLIC             = "public".
	PROTECTED          = "protected".
	PRIVATE            = "private".
	SECTION            = "section".
	METHODS            = "methods".
	CLASS_METHODS      = "class-methods".
	METHOD             = "method".
	ENDMETHOD          = "endmethod".
	WRITE              = "write".
	DATA               = "data".
	CLASS_DATA         = "class-data".
	TYPE               = "type".
	LENGTH             = "length".
	DECIMALS           = "decimals".
	NO_SIGN            = "no-sign".
	MOVE               = "move".
	to                 = "to".
    
/*------------------------------------------------------------------------*/
PRAGMAS
/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/
COMMENTS FROM eol "*"  TO eol
COMMENTS FROM "\""  TO eol

/*------------------------------------------------------------------------*/
IGNORE tab + cr + eol

/*------------------------------------------------------------------------*/
PRODUCTIONS
/*------------------------------------------------------------------------*/

openABAP                                     
=  PROGRAM ident (. Context.DefineProgram(t.val); .) DOT
  { class_command }
.

/*------------------------------------------------------------------------*/
class_command
=  CLASS 					   
  ident                       
  ( class_definition<t.val> | 
    class_implementation<t.val> )
.

class_definition<string name>
= DEFINITION DOT               (. Context.DefineClass(name); .)
  [ public_section ] 
  [ protected_section ] 
  [ private_section ] 
  ENDCLASS DOT
.

class_implementation<string name>
= IMPLEMENTATION DOT			(. Context.ImplementClass( name ); .)
  { method_command }
  ENDCLASS DOT					(. Context.EndClass( ); .)
.

public_section
= PUBLIC SECTION DOT           (. Context.CurrentVisibility = Visibility.publ; .)
  { section }
.
protected_section
= PROTECTED SECTION DOT        (. Context.CurrentVisibility = Visibility.prot; .)
  { section }
.
private_section
= PRIVATE SECTION DOT          (. Context.CurrentVisibility = Visibility.prot; .)
  { section }
.

section
=   methods_command  | class_methods_command  
  | data_command     | class_data_command
.

methods_command
= METHODS
	ident						(. Context.DefineMethod(t, isStatic:false); .)
  DOT
.

class_methods_command
= CLASS_METHODS
    ident						(. Context.DefineMethod(t, isStatic:true); .)
  DOT
.  

/*------------------------------------------------------------------------*/
data_command 
= DATA ( data_parameter<false>
       | ":" data_parameter<false> ["," data_parameter<false>]
       )
  DOT   
.

class_data_command 
= CLASS_DATA  ( data_parameter<true>
       | ":" data_parameter<true> ["," data_parameter<true>]
       )
  DOT
.

data_parameter<bool isStatic>
= ident                		(. string name = t.val; TypeDescr type = new Runtime.BuildinType(); .) 
  [ data_type<out type> ]   (. Context.DefineField(name, type, isStatic); .)
. 

data_type<out TypeDescr type>
= TYPE 									  (. type = null; BuildinType bt; .)
         ( ident                          (. type = new Runtime.NamedType(t.val); .)
         | buildintype<out bt>            (. type = bt; .)
         )  
.
/*------------------------------------------------------------------------*/
method_command
= METHOD ident                 (. Context.ImplementMethod( t ); .) 
  DOT
  { command_block }
  ENDMETHOD DOT                (. Context.EndMethod( t ); .)
.

command_block
= ( data_command
  | write_command 
  | move_command 
  | compute_command )
.

/*------------------------------------------------------------------------*/

buildintype <out Runtime.BuildinType type>  (. type = null; .)
= 
  ( fixlentype <out type> 
  | varlentype <out type> 
  | packedtype <out type>
  )
.

fixlentype <out Runtime.BuildinType aType>	  (. aType = null; .)
= ( "i"                                   (. aType = new Runtime.BuildinType( Runtime.InternalType.i ); .)
  | "d"                                   (. aType = new Runtime.BuildinType( Runtime.InternalType.d ); .)
  | "t"                                   (. aType = new Runtime.BuildinType( Runtime.InternalType.t ); .)
  )                      
.
  
varlentype <out Runtime.BuildinType aType>   (. aType = null; .)
  = ( "c"                                 (. aType = new Runtime.BuildinType( Runtime.InternalType.c ); .)
    | "n"                                 (. aType = new Runtime.BuildinType( Runtime.InternalType.n ); .)
    ) 
  [LENGTH number              (. aType.setLength ( Convert.ToInt32(t.val) ); .)  ]
.

packedtype <out Runtime.BuildinType aType>   (. aType = null; .)   
= "p"                                        (. aType = new Runtime.BuildinType( Runtime.InternalType.p ); .)
  [LENGTH number                 (. aType.setLength( Convert.ToInt32(t.val) ); .) ]
  [DECIMALS number]
  [NO_SIGN]
.

/*------------------------------------------------------------------------*/
write_command
= WRITE                                      (. Write cmd = new Write(t); .)
  (  ":" write_parameter<cmd> 
     { ","                                   (. cmd = new Write(t); .)
        write_parameter<cmd> } 
  |  write_parameter<cmd>
  ) DOT 
.

write_parameter<Write cmd>                              
= [format<cmd>] value<out cmd.Value>    	 (. cmd.End(t); Context.EmitCommand( cmd ); .)
.

format<Write cmd>
= "/"                                (. cmd.Format = t.val; .)
.

value <out Compiler.IfValue value>     (. value = null; IfVariable var=null; .)
= ( literal<out value> 
  | variable<out var>                  (. value = var; .)
  ).
  
literal <out Compiler.IfValue value>   (. value = null; .)
= ( string                           (. value = new Compiler.StringLiteral( t.val.Substring(1,t.val.Length-2) ); .)
  | number                           (. value = new Compiler.IntegerLiteral( Convert.ToInt32( t.val) ); .)
  )
.

variable <out Compiler.IfVariable variable>   (. Scanner.ignore_space = false; .)
= {SPACE} ident                          (. variable = Context.GetVariable( t.val ); .) 
  { ( instance_member 
    | class_member 
    | struct_field 
    ) 
  } 
  [ "+" number ]
  [ "(" number ")" ]   
  {SPACE}                                (. Scanner.ignore_space = true; .)
.                                      

instance_member
= "->" ident
.

class_member
= "=>" ident
.

struct_field
= "-" ident
.

/*------------------------------------------------------------------------*/
move_command                              (. Compiler.IfValue aValue;   .)
= MOVE                                    (. Move cmd = new Move(t); .)
    value <out cmd.Source>           
    to variable <out cmd.Target>
  DOT                                     (. Context.EmitCommand( cmd); .)
.

/*------------------------------------------------------------------------*/
compute_command                           (. openABAP.Compiler.IfVariable target; .)
= variable <out target>                   (. Compute cmd = new Compute(t); cmd.Target = target; .)
  "=" expression <out cmd.Expression>
  DOT                                     (. cmd.End(t); Context.EmitCommand( cmd ); .)
.

expression <out Compiler.IfExpression e> (. e=null; string op; IfExpression e2; .)
= ( MINUS term <out e2>                  (. e = new UnaryExpression ("-", e2 ); .)
  |       term <out e> 
  )
  { addition <out op>
    term <out e2>                        (. e = new BinaryExpression(e, op, e2); .)
  }
.

term <out Compiler.IfExpression e>       (. string op; IfExpression e2; e=null; .)
= factor <out e> 
  { multiply <out op> 
    factor <out e2>                      (. e = new BinaryExpression(e, op, e2); .)
  }
.

factor <out Compiler.IfExpression e>     (. Compiler.IfValue val; e=null; .)
= (       value <out val>                (. e = new ExpressionLeaf( val ); .)
  | "(" expression <out  e>  ")" 
  )
.

addition <out string op> = ( PLUS     | MINUS )  (. op = t.val; .).
multiply <out string op> = ( MULTIPLY | DIVIDE ) (. op = t.val; .).

/*------------------------------------------------------------------------*/
END openABAP.
